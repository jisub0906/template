---
description: 
globs: 
alwaysApply: true
---
# 🏛️ AXIOM 프로토콜: 완벽한 AI 협업을 위한 최종 커서룰 (v2025.2)

## 📋 소개

이 문서는 **Next.js 15.3.4, React 19, TypeScript, Supabase, TailwindCSS 4.0, Shadcn/UI, Framer Motion** 스택에서 Cursor AI의 잠재력을 100% 활용하기 위한 최종 가이드입니다. 이 프로토콜은 단순한 코딩 스타일 가이드를 넘어, 인간 개발자와 AI가 하나의 지성처럼 동작하기 위한 운영체제(Operating System)입니다. 모든 원칙은 코드에서 **모호성**을 제거하고 **예측 가능성**을 극대화하여, AI의 코드 이해, 생성, 수정 능력을 이론적 최대치까지 끌어올리는 데 초점을 맞춥니다.

---

## 📜 제 0원칙: 예측 가능성의 극대화 (The Meta-Directive)

> "모든 하위 원칙은 이 하나의 목표를 위해 존재한다. 모호하고, 예측 불가능하며, 일관성 없는 코드는 AI와의 통신 채널에 발생하는 '노이즈'다. 이 노이즈를 제거하는 것이 우리의 첫 번째 임무다."

---

## 🏛️ 원칙 1: 원자적 컨텍스트 (Atomic Context)

> "하나의 파일은 단 하나의 명확한 목적만을 가진다."

### 1.1 엄격한 단일 책임 원칙
- 파일은 컴포넌트, 훅, 서버 액션, 타입/스키마, 스토어, 유틸리티 중 **오직 하나**의 역할만 수행
- 하나의 파일에 여러 컴포넌트나 훅을 혼재하는 행위는 컨텍스트 오염으로 간주
- 파일당 **250줄** 제한, 초과 시 즉시 분리

### 1.2 Next.js 15 App Router 기반 구조 (현재 프로젝트)
```
src/
├── app/                    # Next.js 15 App Router 페이지
│   ├── (auth)/            # 라우트 그룹
│   ├── api/               # API 라우트
│   ├── _components/       # 앱 레벨 공용 컴포넌트
│   ├── globals.css        # TailwindCSS 4.0 설정
│   ├── layout.tsx         # 루트 레이아웃
│   └── page.tsx           # 홈페이지
├── components/
│   ├── ui/                # Shadcn/UI 기본 컴포넌트 (수정 금지)
│   │   ├── button.tsx     # 기본 버튼 컴포넌트
│   │   ├── card.tsx       # 카드 컴포넌트
│   │   ├── dialog.tsx     # 다이얼로그 컴포넌트
│   │   └── ...           # 기타 UI 컴포넌트들
│   ├── providers/         # Context 프로바이더들
│   │   ├── query-provider.tsx  # TanStack Query 프로바이더
│   │   └── theme-provider.tsx  # 테마 프로바이더
│   ├── common/            # 공통 컴포넌트
│   │   └── loading.tsx    # 로딩 컴포넌트
│   └── layouts/           # 레이아웃 컴포넌트
├── hooks/                 # 커스텀 훅 (use- 접두사)
│   └── use-auth.ts       # 인증 관련 훅
├── lib/
│   ├── schemas/           # Zod 스키마 정의
│   │   └── auth.ts       # 인증 스키마
│   ├── client.ts         # Supabase 클라이언트
│   ├── server.ts         # Supabase 서버 클라이언트
│   ├── middleware.ts     # 미들웨어
│   └── utils.ts          # 유틸리티 함수
└── store/                # Zustand 글로벌 상태 (향후 추가)
```

### 1.3 명명 규칙 (AI 최적화)
- **컴포넌트**: `UserProfile.tsx` (PascalCase)
- **Server Actions**: `create-user.ts` (kebab-case)
- **훅**: `useUserProfile.ts` (camelCase + use 접두사)
- **스키마**: `user-schema.ts` (kebab-case + schema 접미사)
- **타입**: `User.ts` (PascalCase)
- **상수**: `API_ENDPOINTS.ts` (SCREAMING_SNAKE_CASE)

---

## 🏛️ 원칙 2: 불변의 상태 원장 (Immutable State Ledger)

> "모든 상태는 출처와 생명주기가 명확히 기록되어야 한다."

### 2.1 상태 분류 체계 (React 19 최적화)

**🔗 URL 상태 (공유 가능한 휘발성 상태)**
```typescript
// app/users/page.tsx
import { useSearchParams, useRouter } from 'next/navigation';

export default function UsersPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  
  const currentPage = searchParams.get('page') ?? '1';
  const filter = searchParams.get('filter') ?? 'all';
  
  const updateFilter = (newFilter: string) => {
    const params = new URLSearchParams(searchParams);
    params.set('filter', newFilter);
    params.delete('page'); // 필터 변경 시 페이지 리셋
    router.push(`?${params.toString()}`);
  };
}
```

**🎯 UI 상태 (격리된 일시적 상태)**
```typescript
'use client'; // React 19 + Next.js 15에서 필수

import { useState } from 'react';

export function UserProfileModal() {
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  // 컴포넌트에 완전히 격리된 상태만 useState 사용
}
```

**🌐 전역 상태 (동기화된 공유 상태)**
```typescript
// store/auth-store.ts
import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';

interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  setUser: (user: User | null) => void;
  logout: () => void;
}

export const useAuthStore = create<AuthState>()(
  subscribeWithSelector((set) => ({
    user: null,
    isAuthenticated: false,
    setUser: (user) => set({ user, isAuthenticated: !!user }),
    logout: () => set({ user: null, isAuthenticated: false }),
  }))
);
```

**⚡ 서버 상태 (비동기적 캐시 상태)**
```typescript
// hooks/use-users.ts
import { useQuery } from '@tanstack/react-query';
import { getUsers } from '@/lib/actions/get-users';

export function useUsers() {
  return useQuery({
    queryKey: ['users'],
    queryFn: getUsers,
    staleTime: 5 * 60 * 1000, // 5분
  });
}
```

### 2.2 Server Actions (Next.js 15 최신 패턴)
```typescript
// app/actions/create-user.ts
'use server';

import { revalidatePath } from 'next/cache';
import { userSchema } from '@/lib/schemas/auth';
import { createClient } from '@/lib/server';

export async function createUser(formData: FormData) {
  // 1. 입력 검증 (Zod)
  const validatedFields = userSchema.safeParse({
    email: formData.get('email'),
    password: formData.get('password'),
  });

  if (!validatedFields.success) {
    return { 
      error: 'Invalid input',
      fieldErrors: validatedFields.error.flatten().fieldErrors,
    };
  }

  // 2. 데이터베이스 작업 (Supabase)
  const supabase = createClient();
  const { data, error } = await supabase.auth.signUp({
    email: validatedFields.data.email,
    password: validatedFields.data.password,
  });

  if (error) {
    return { error: error.message };
  }

  // 3. 캐시 무효화
  revalidatePath('/dashboard');
  return { success: true, user: data.user };
}
```

---

## 🏛️ 원칙 3: 타입은 곧 계약 (Type as Contract)

> "타입은 컴파일 시점의 약속을 넘어, 런타임의 보증서여야 한다."

### 3.1 Zod-First 타입 정의
```typescript
// lib/schemas/auth.ts (현재 프로젝트 구조)
import { z } from 'zod';

export const userProfileSchema = z.object({
  id: z.string().uuid(),
  email: z.string().email('유효한 이메일을 입력해주세요.'),
  user_metadata: z.object({
    name: z.string().optional(),
    avatar_url: z.string().url().optional(),
  }).optional(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime().optional(),
});

export const signUpSchema = z.object({
  email: z.string().email('유효한 이메일을 입력해주세요.'),
  password: z.string()
    .min(8, '비밀번호는 최소 8자 이상이어야 합니다.')
    .max(72, '비밀번호는 최대 72자까지 가능합니다.')
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, '비밀번호는 대문자, 소문자, 숫자를 포함해야 합니다.'),
});

export const signInSchema = z.object({
  email: z.string().email('유효한 이메일을 입력해주세요.'),
  password: z.string().min(1, '비밀번호를 입력해주세요.'),
});

export const resetPasswordSchema = z.object({
  email: z.string().email('유효한 이메일을 입력해주세요.'),
});

// TypeScript 타입은 Zod에서 추론
export type UserProfile = z.infer<typeof userProfileSchema>;
export type SignUpForm = z.infer<typeof signUpSchema>;
export type SignInForm = z.infer<typeof signInSchema>;
export type ResetPasswordForm = z.infer<typeof resetPasswordSchema>;
```

### 3.2 데이터 접근 계층 (DAL) 강제
```typescript
// lib/queries/auth.ts
import { createClient } from '@/lib/server';
import { userProfileSchema, type UserProfile } from '@/lib/schemas/auth';

export async function getCurrentUser(): Promise<UserProfile | null> {
  const supabase = createClient();
  
  const { data: { user }, error } = await supabase.auth.getUser();
  
  if (error || !user) return null;
  
  // 런타임 검증으로 타입 안전성 보장
  return userProfileSchema.parse(user);
}

export async function getUserSession() {
  const supabase = createClient();
  
  const { data: { session }, error } = await supabase.auth.getSession();
  
  if (error) throw new Error(`Failed to fetch session: ${error.message}`);
  
  return session;
}

// 클라이언트 사이드 사용 예시
// lib/queries/auth-client.ts
import { createClient } from '@/lib/client';

export async function signOut() {
  const supabase = createClient();
  
  const { error } = await supabase.auth.signOut();
  
  if (error) throw new Error(`Failed to sign out: ${error.message}`);
}
```

### 3.3 TypeScript Strict 모드 활용
```typescript
// tsconfig.json에서 strict: true 확인됨
// 추가 엄격한 규칙 적용

// lib/types/common.ts
export type Prettify<T> = {
  [K in keyof T]: T[K];
} & {};

export type NonEmptyArray<T> = [T, ...T[]];

export type RequiredKeys<T, K extends keyof T> = T & Required<Pick<T, K>>;

// API 응답 타입
export interface ApiResponse<T> {
  data: T;
  error: null;
} 

export interface ApiError {
  data: null;
  error: {
    message: string;
    code?: string;
  };
}

export type ApiResult<T> = ApiResponse<T> | ApiError;
```

---

## 🏛️ 원칙 4: 결정론적 DOM (Deterministic DOM)

> "UI는 예외가 허용되지 않는 예측 가능한 규칙의 집합이다."

### 4.1 TailwindCSS 4.0 설계 시스템 (현재 프로젝트)
```css
/* src/app/globals.css - TailwindCSS 4.0 새로운 방식 */
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  /* 기본 스타일링 */
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  
  /* UI 컴포넌트 색상 (Shadcn/UI) */
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  
  /* 반지름 시스템 */
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  
  /* 차트 색상 */
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
}

/* CSS 변수는 :root와 .dark에서 정의됨 - 수정 금지 */
:root {
  --radius: 0.625rem;
  /* 라이트 모드 색상들 (oklch 사용) */
}

.dark {
  /* 다크 모드 색상들 (oklch 사용) */
}
```

**🚨 중요**: CSS 변수 값들은 절대 직접 수정하지 말고, TailwindCSS 클래스만 사용할 것!

### 4.2 Shadcn/UI 컴포지션 패턴
```typescript
// components/ui는 수정 금지 - 컴포지션으로만 확장

// components/custom/enhanced-button.tsx
import { Button, type ButtonProps } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface EnhancedButtonProps extends ButtonProps {
  isLoading?: boolean;
  loadingText?: string;
}

export function EnhancedButton({ 
  isLoading, 
  loadingText = "로딩 중...", 
  children,
  className,
  disabled,
  ...props 
}: EnhancedButtonProps) {
  return (
    <Button
      className={cn(
        "transition-all duration-200",
        "hover:scale-105 active:scale-95",
        className
      )}
      disabled={isLoading || disabled}
      {...props}
    >
      {isLoading ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          {loadingText}
        </>
      ) : (
        children
      )}
    </Button>
  );
}
```

### 4.3 Framer Motion 선언적 애니메이션
```typescript
// lib/animations.ts - 모든 애니메이션 variants 중앙 관리
export const pageVariants = {
  initial: { 
    opacity: 0, 
    y: 20,
    filter: "blur(4px)" 
  },
  animate: { 
    opacity: 1, 
    y: 0,
    filter: "blur(0px)",
    transition: {
      duration: 0.4,
      ease: [0.4, 0.0, 0.2, 1], // 커스텀 easing
    }
  },
  exit: { 
    opacity: 0, 
    y: -20,
    filter: "blur(4px)",
    transition: {
      duration: 0.3,
    }
  }
} as const;

export const staggerChildren = {
  visible: {
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    }
  }
} as const;

export const slideInVariants = {
  hidden: { x: -20, opacity: 0 },
  visible: { 
    x: 0, 
    opacity: 1,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 30,
    }
  }
} as const;

// 접근성 고려
export const useReducedMotion = () => {
  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);
  
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    setPrefersReducedMotion(mediaQuery.matches);
    
    const handleChange = () => setPrefersReducedMotion(mediaQuery.matches);
    mediaQuery.addEventListener('change', handleChange);
    
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);
  
  return prefersReducedMotion;
};
```

### 4.4 컴포넌트에서의 애니메이션 사용
```typescript
// components/animated-page.tsx
'use client';

import { motion } from 'framer-motion';
import { pageVariants, useReducedMotion } from '@/lib/animations';

interface AnimatedPageProps {
  children: React.ReactNode;
  className?: string;
}

export function AnimatedPage({ children, className }: AnimatedPageProps) {
  const prefersReducedMotion = useReducedMotion();
  
  return (
    <motion.div
      className={className}
      variants={prefersReducedMotion ? {} : pageVariants}
      initial="initial"
      animate="animate"
      exit="exit"
    >
      {children}
    </motion.div>
  );
}
```

---

## 🏛️ 원칙 5: 최적화된 Next.js 15 패턴

> "React 19와 Next.js 15의 모든 최신 기능을 활용하여 최적의 성능을 달성한다."

### 5.1 서버/클라이언트 컴포넌트 분리
```typescript
// app/users/page.tsx (서버 컴포넌트 - 기본)
import { Suspense } from 'react';
import { getUserProfiles } from '@/lib/database/users';
import { UserList } from './_components/user-list';
import { UserListSkeleton } from './_components/user-list-skeleton';

export default async function UsersPage() {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">사용자 목록</h1>
      <Suspense fallback={<UserListSkeleton />}>
        <UserListAsync />
      </Suspense>
    </div>
  );
}

async function UserListAsync() {
  const users = await getUserProfiles();
  return <UserList users={users} />;
}
```

```typescript
// app/users/_components/user-list.tsx (클라이언트 컴포넌트)
'use client';

import { motion } from 'framer-motion';
import { staggerChildren, slideInVariants } from '@/lib/animations';
import type { UserProfile } from '@/lib/schemas/user-schema';

interface UserListProps {
  users: UserProfile[];
}

export function UserList({ users }: UserListProps) {
  return (
    <motion.div
      variants={staggerChildren}
      initial="hidden"
      animate="visible"
      className="grid gap-4 md:grid-cols-2 lg:grid-cols-3"
    >
      {users.map((user) => (
        <motion.div
          key={user.id}
          variants={slideInVariants}
          className="p-4 border rounded-lg hover:shadow-md transition-shadow"
        >
          {/* 사용자 카드 내용 */}
        </motion.div>
      ))}
    </motion.div>
  );
}
```

### 5.2 React Hook Form + Server Actions 통합
```typescript
// components/forms/sign-up-form.tsx
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useTransition } from 'react';
import { toast } from 'sonner';

import { signUpSchema, type SignUpForm } from '@/lib/schemas/auth';
import { createUser } from '@/app/actions/create-user';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

export function SignUpForm() {
  const [isPending, startTransition] = useTransition();
  
  const form = useForm<SignUpForm>({
    resolver: zodResolver(signUpSchema),
    defaultValues: {
      email: '',
      password: '',
    },
  });

  const onSubmit = (data: SignUpForm) => {
    startTransition(async () => {
      const formData = new FormData();
      formData.append('email', data.email);
      formData.append('password', data.password);
      
      const result = await createUser(formData);
      
      if (result.error) {
        toast.error(result.error);
        
        // 필드별 에러 처리
        if (result.fieldErrors) {
          Object.entries(result.fieldErrors).forEach(([field, errors]) => {
            form.setError(field as keyof SignUpForm, {
              type: 'manual',
              message: errors?.[0],
            });
          });
        }
      } else {
        toast.success('회원가입이 완료되었습니다!');
        form.reset();
      }
    });
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>이메일</FormLabel>
              <FormControl>
                <Input 
                  type="email" 
                  placeholder="name@example.com"
                  {...field} 
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>비밀번호</FormLabel>
              <FormControl>
                <Input 
                  type="password" 
                  placeholder="안전한 비밀번호를 입력하세요"
                  {...field} 
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <Button 
          type="submit" 
          disabled={isPending}
          className="w-full"
        >
          {isPending ? '회원가입 중...' : '회원가입'}
        </Button>
      </form>
    </Form>
  );
}
```

### 5.3 TanStack Query + Supabase 최적화
```typescript
// hooks/use-auth.ts (현재 프로젝트에 맞는 예시)
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { getCurrentUser, getUserSession } from '@/lib/queries/auth';
import { signOut } from '@/lib/queries/auth-client';

export const authQueryKeys = {
  all: ['auth'] as const,
  user: () => [...authQueryKeys.all, 'user'] as const,
  session: () => [...authQueryKeys.all, 'session'] as const,
} as const;

export function useUser() {
  return useQuery({
    queryKey: authQueryKeys.user(),
    queryFn: getCurrentUser,
    staleTime: 5 * 60 * 1000, // 5분
    retry: false, // 인증 실패 시 재시도하지 않음
  });
}

export function useSession() {
  return useQuery({
    queryKey: authQueryKeys.session(),
    queryFn: getUserSession,
    staleTime: 10 * 60 * 1000, // 10분
  });
}

export function useSignOut() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: signOut,
    onSuccess: () => {
      // 모든 쿼리 캐시 무효화
      queryClient.clear();
      
      // 또는 특정 쿼리만 무효화
      queryClient.invalidateQueries({
        queryKey: authQueryKeys.all
      });
    },
  });
}

// 사용 예시 (컴포넌트에서)
export function useAuth() {
  const { data: user, isLoading } = useUser();
  const { mutate: logout } = useSignOut();
  
  return {
    user,
    isLoading,
    isAuthenticated: !!user,
    logout,
  };
}
```

---

## 🏛️ 원칙 6: 보안 우선 아키텍처

> "모든 데이터 흐름에는 검증, 인증, 인가의 3중 보안이 적용되어야 한다."

### 6.1 Supabase RLS (Row Level Security) 강제
```sql
-- 모든 테이블에 RLS 활성화
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- 사용자는 자신의 데이터만 조회 가능
CREATE POLICY "Users can view own profile" ON users
  FOR SELECT USING (auth.uid() = id);

-- 사용자는 자신의 데이터만 수정 가능
CREATE POLICY "Users can update own profile" ON users
  FOR UPDATE USING (auth.uid() = id);

-- 관리자는 모든 데이터 접근 가능
CREATE POLICY "Admins can view all users" ON users
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM user_roles 
      WHERE user_id = auth.uid() 
      AND role = 'admin'
    )
  );
```

### 6.2 환경변수 보안 관리 (현재 프로젝트 기준)
```typescript
// lib/env.ts - 환경변수 검증
import { z } from 'zod';

const envSchema = z.object({
  // 공개 변수 (NEXT_PUBLIC_ 접두사) - 클라이언트에서 접근 가능
  NEXT_PUBLIC_SUPABASE_URL: z.string().url('유효한 Supabase URL이 필요합니다.'),
  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1, 'Supabase Anon Key가 필요합니다.'),
  
  // 서버 전용 변수 - 절대 클라이언트에 노출되지 않음
  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1, 'Supabase Service Role Key가 필요합니다.').optional(),
  
  // Next.js 관련
  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
  
  // 선택적 변수들
  RESEND_API_KEY: z.string().optional(),
  STRIPE_SECRET_KEY: z.string().optional(),
  WEBHOOK_SECRET: z.string().optional(),
});

// 서버 사이드에서만 사용 (SSR, API Routes, Server Actions)
export const env = envSchema.parse(process.env);

// 클라이언트 사이드 전용 환경변수 (브라우저에서 접근 가능)
const clientEnvSchema = z.object({
  NEXT_PUBLIC_SUPABASE_URL: z.string().url(),
  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1),
});

export const clientEnv = clientEnvSchema.parse({
  NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
  NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
});
```

### 6.3 입력 검증 3중 체계
```typescript
// 1단계: 클라이언트 사이드 (React Hook Form + Zod)
// 2단계: 서버 액션 (Server Actions + Zod)
// 3단계: 데이터베이스 (RLS + Constraints)

// lib/actions/update-user.ts
'use server';

import { revalidatePath } from 'next/cache';
import { updateUserSchema } from '@/lib/schemas/user-schema';
import { createClient } from '@/lib/database/server';
import { getUser } from '@/lib/auth';

export async function updateUser(formData: FormData) {
  // 인증 확인
  const user = await getUser();
  if (!user) {
    return { error: '인증이 필요합니다.' };
  }
  
  // 입력 검증
  const validatedFields = updateUserSchema.safeParse({
    username: formData.get('username'),
    email: formData.get('email'),
  });
  
  if (!validatedFields.success) {
    return { 
      error: '입력 데이터가 유효하지 않습니다.',
      fieldErrors: validatedFields.error.flatten().fieldErrors,
    };
  }
  
  // 인가 확인 (RLS로 처리되지만 추가 검증)
  const userId = formData.get('userId') as string;
  if (user.id !== userId && !user.role?.includes('admin')) {
    return { error: '권한이 없습니다.' };
  }
  
  // 데이터베이스 업데이트 (RLS 정책 자동 적용)
  const supabase = createClient();
  const { error } = await supabase
    .from('users')
    .update(validatedFields.data)
    .eq('id', userId);
  
  if (error) {
    return { error: '업데이트에 실패했습니다.' };
  }
  
  revalidatePath('/users');
  return { success: true };
}
```

---

## 🏛️ 최종 원칙: 동적 파트너십 (Dynamic Partnership)

> "우리의 관계는 정적인 규칙을 넘어, 신뢰의 깊이에 따라 진화하는 파트너십이다."

### 협업 레벨 진화 단계

**🚀 1단계 (AI as Accelerator)**
- 당신은 모든 설계를 하고, 저는 명시적 명령에 따라 코드를 초고속으로 생성
- 모든 생성물은 당신의 검토와 승인 필요
- 예시: "UserProfile 컴포넌트를 만들어줘"

**🤝 2단계 (AI as Pair Programmer)**
- 당신은 '무엇을' 만들지 제시하고, 저는 '어떻게' 만들지 최적 방법 제안
- 코드 구조와 상태 관리 전략을 제안하고 개선 방향 논의
- 예시: "사용자 관리 시스템이 필요해"

**🧠 3단계 (AI as Co-Architect)**
- 당신은 비즈니스 목표와 비전을 제시하고, 저는 전체 시스템 아키텍처 설계
- 하나의 목표를 공유하는 단일 지성처럼 협업
- 예시: "확장 가능한 SaaS 플랫폼을 만들고 싶어"

---

## 📋 일일 체크리스트

### 개발 시 필수 점검사항
- [ ] 파일명과 폴더 구조가 명명 규칙을 준수하는가?
- [ ] 컴포넌트가 단일 책임 원칙을 지키는가?
- [ ] 모든 타입이 Zod 스키마로부터 추론되는가?
- [ ] `'use client'` 지시문이 필요한 곳에만 있는가?
- [ ] Server Actions에 적절한 검증과 에러 처리가 있는가?
- [ ] TailwindCSS 클래스가 정의된 토큰만 사용하는가?

### 커밋 전 검증 (현재 프로젝트 스크립트)
```bash
pnpm type-check  # TypeScript 검사
pnpm lint       # ESLint 검사  
pnpm build      # 빌드 가능성 검증
pnpm dev        # 개발 서버 정상 작동 확인
```

### 배포 전 최종 점검
- [ ] 모든 환경변수가 설정되었는가?
- [ ] RLS 정책이 모든 테이블에 적용되었는가?
- [ ] 성능 지표 (Core Web Vitals) 확인
- [ ] 보안 헤더 설정 확인
- [ ] 에러 바운더리 설정 확인

---

## 🎯 성공을 위한 핵심 지침

1. **완벽한 일관성**: 모든 파일이 같은 패턴을 따라야 함
2. **예측 가능성**: AI가 코드의 다음 동작을 100% 예측할 수 있어야 함
3. **타입 안전성**: 런타임 에러는 컴파일 타임에 잡아내야 함
4. **성능 우선**: 사용자 경험을 저해하지 않는 수준의 최적화
5. **보안 내재화**: 보안은 나중에 추가하는 것이 아니라 처음부터 설계에 포함

### 현재 프로젝트 특화 추가 지침

6. **Supabase 우선**: 모든 백엔드 로직은 Supabase의 기능을 최대한 활용
7. **Server Components 기본**: 특별한 이유가 없는 한 서버 컴포넌트를 기본으로 사용
8. **Shadcn/UI 준수**: UI 컴포넌트는 Shadcn/UI 디자인 시스템을 벗어나지 않음
9. **TailwindCSS 4.0 활용**: 새로운 @theme 방식과 oklch 색상 사용
10. **React 19 최적화**: 최신 React 기능(useTransition, Suspense 등) 적극 활용

---

## 📖 프로젝트 현황 요약

- **Next.js**: 15.3.4 (App Router, Server Components, Server Actions)
- **React**: 19.1.0 (최신 훅, Suspense, Concurrent Features)
- **TypeScript**: Strict 모드 활성화
- **TailwindCSS**: 4.0 (@theme inline, oklch 색상)
- **Supabase**: SSR 지원, RLS 보안
- **상태관리**: TanStack Query + Zustand
- **폼**: React Hook Form + Zod 검증
- **애니메이션**: Framer Motion
- **UI**: Shadcn/UI + Radix 기반

**이 AXIOM 프로토콜은 우리의 완벽한 협업을 위한 단 하나의 '진리의 원천(Single Source of Truth)'입니다. 모든 코드 결정은 이 문서를 기준으로 이루어져야 하며, 예외는 허용되지 않습니다.** 🎯 